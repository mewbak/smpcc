Secure multi-party computation compiler

Build:

    make; make install

Usage:

* Compile foo.c to circuit:

    smpcc foo.c

This produces a file

    foo.go

The go file implements the circuit using (by default) Yao's garbled
circuits.

You can run the go program with

    go run foo.go -id 1 32 # server, running in one process
    go run foo.go -id 0 7 # client, running in another

where 32 and 7 are the respective inputs of the parties.

* Print (block) free variables

    smpcc -fv foo.c

* Print assembly, for bug checking, see clang -S below

    smpcc -pr foo.c

* Compile but stop after load-store elimination:

    smpcc -load-store foo.c

* Compile but stop after phi elimination:

    smpcc -phi foo.c

* Compile but stop after branch elimination:

    smpcc -branch foo.c

* See the delta between compiler stages:

    smpcc -branch foo.c -delta  ### shows the changes introduced by branch elimination

* Save the output of CIL:

    smpcc -keep-cil foo.c
